{"ast":null,"code":"//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\r\n * This function creating the wide screen plugin object.\r\n * @param {object} pluginsman Access to the plugins manager for pptx documents.\r\n * @constructor\r\n * @name MakeWidescreenPlugin\r\n */\nfunction MakeWidescreenPlugin(pluginsman) {\n  var funcThis = this;\n\n  if (pluginsman.docType !== 'pptx' && pluginsman.docType !== 'ppsx') {\n    throw \"[pptx-widescreen] This plugin supporting only PowerPoint based documents.\";\n  } // Endif.\n\n\n  this.pluginsman = pluginsman;\n  this.pptxData = pluginsman.getDataStorage(); // We want to extend the main API of the pptx document object:\n\n  pluginsman.registerCallback('makeDocApi', function (docObj) {\n    funcThis.extendPptxApi(docObj);\n  });\n  return this;\n}\n/**\r\n * This function extending the main document object with new API methods.\r\n * @param {object} docObj Document object.\r\n */\n\n\nMakeWidescreenPlugin.prototype.extendPptxApi = function (docObj) {\n  var funcThis = this;\n\n  docObj.setSlideSize = function (cx, cy, sizeType) {\n    if (cx && typeof cx === 'number') {\n      funcThis.pptxData.pptWidth = cx * funcThis.pptxData.EMUS_PER_PT;\n    } // Endif.\n\n\n    if (cy && typeof cy === 'number') {\n      funcThis.pptxData.pptHeight = cy * funcThis.pptxData.EMUS_PER_PT;\n    } // Endif.\n\n    /*\r\n    Supported types:\r\n    \t\t'35mm'\r\n    'A3'\r\n    'A4'\r\n    'B4ISO'\r\n    'B4JIS'\r\n    'B5ISO'\r\n    'B5JIS'\r\n    'banner'\r\n    'custom'\r\n    'hagakiCard'\r\n    'ledger'\r\n    'letter'\r\n    'overhead'\r\n    'screen16x10'\r\n    'screen16x9'\r\n    'screen4x3'\r\n    */\n\n\n    if (sizeType && typeof sizeType === 'string') {\n      funcThis.pptxData.pptType = sizeType;\n    } // Endif.\n\n  };\n\n  docObj.setWidescreen = function (wide) {\n    funcThis.pptxData.pptWidth = wide ? 960 * funcThis.pptxData.EMUS_PER_PT : funcThis.pptxData.pptWidth;\n    funcThis.pptxData.pptType = wide ? 'screen16x9' : 'screen4x3';\n  };\n};\n\nmodule.exports = MakeWidescreenPlugin;","map":null,"metadata":{},"sourceType":"script"}