{"ast":null,"code":"//\n// officegen: All the code to generate XLSX files.\n//\n// Please refer to README.md for this module's documentations.\n//\n// NOTE:\n// - Before changing this code please refer to the hacking the code section on README.md.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\r\n * Basicgen plugin to create xlsx files (Microsoft Excel).\r\n */\nvar baseobj = require(\"./basicgen.js\");\n\nvar msdoc = require(\"./msofficegen.js\");\n\nvar docplugman = require('./docplug'); // Officegen xlsx plugins:\n// BMK_XLSX_PLUG:\n\n\nif (!String.prototype.encodeHTML) {\n  String.prototype.encodeHTML = function () {\n    return this.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n  };\n}\n/**\r\n * Extend officegen object with XLSX support.\r\n *\r\n * This method extending the given officegen object to create XLSX document.\r\n *\r\n * @param {object} genobj The object to extend.\r\n * @param {string} new_type The type of object to create.\r\n * @param {object} options The object's options.\r\n * @param {object} gen_private Access to the internals of this object.\r\n * @param {object} type_info Additional information about this type.\r\n * @constructor\r\n * @name makeXlsx\r\n */\n\n\nfunction makeXlsx(genobj, new_type, options, gen_private, type_info) {\n  /**\r\n   * Prepare the default data.\r\n   * @param {object} docpluginman Access to the document plugins manager.\r\n   */\n  function setDefaultDocValues(docpluginman) {\n    var pptxData = docpluginman.getDataStorage(); // Please put any setting that API can override here:\n  }\n  /**\r\n   * Create the shared string resource.\r\n   *\r\n   * This resource holding all the text strings of any Excel document.\r\n   *\r\n   * @param {object} data Ignored by this callback function.\r\n   * @return Text string.\r\n   */\n\n\n  function cbMakeXlsSharedStrings(data) {\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + genobj.generate_data.total_strings + '\" uniqueCount=\"' + genobj.generate_data.shared_strings.length + '\">';\n\n    for (var i = 0, total_size = genobj.generate_data.shared_strings.length; i < total_size; i++) {\n      outString += '<si><t>' + genobj.generate_data.shared_strings[i].encodeHTML() + '</t></si>';\n    } // Endif.\n\n\n    return outString + '</sst>';\n  }\n  /**\r\n   * Prepare everything to generate XLSX files.\r\n   *\r\n   * This method working on all the Excel cells to find out information needed by the generator engine.\r\n   */\n\n\n  function cbPrepareXlsxToGenerate() {\n    genobj.generate_data = {};\n    genobj.generate_data.shared_strings = [];\n    genobj.lookup_strings = {};\n    genobj.generate_data.total_strings = 0;\n    genobj.generate_data.cell_strings = []; // Tell all the features (plugins) that we are about to generate a new document zip:\n\n    gen_private.features.type.xlsx.emitEvent('beforeGen', genobj); // Allow some plugins to do more stuff after all the plugins added their data:\n\n    gen_private.features.type.xlsx.emitEvent('beforeGenFinal', genobj); // Create the share strings data:\n\n    for (var i = 0, total_size = gen_private.pages.length; i < total_size; i++) {\n      if (gen_private.pages[i]) {\n        for (var rowId = 0, total_size_y = gen_private.pages[i].sheet.data.length; rowId < total_size_y; rowId++) {\n          if (gen_private.pages[i].sheet.data[rowId]) {\n            for (var columnId = 0, total_size_x = gen_private.pages[i].sheet.data[rowId].length; columnId < total_size_x; columnId++) {\n              if (typeof gen_private.pages[i].sheet.data[rowId][columnId] != 'undefined') {\n                switch (typeof gen_private.pages[i].sheet.data[rowId][columnId]) {\n                  case 'string':\n                    genobj.generate_data.total_strings++;\n\n                    if (!genobj.generate_data.cell_strings[i]) {\n                      genobj.generate_data.cell_strings[i] = [];\n                    } // Endif.\n\n\n                    if (!genobj.generate_data.cell_strings[i][rowId]) {\n                      genobj.generate_data.cell_strings[i][rowId] = [];\n                    } // Endif.\n\n\n                    var shared_str = gen_private.pages[i].sheet.data[rowId][columnId];\n\n                    if (shared_str in genobj.lookup_strings) {\n                      genobj.generate_data.cell_strings[i][rowId][columnId] = genobj.lookup_strings[shared_str];\n                    } else {\n                      var shared_str_position = genobj.generate_data.shared_strings.length;\n                      genobj.generate_data.cell_strings[i][rowId][columnId] = shared_str_position;\n                      genobj.lookup_strings[shared_str] = shared_str_position;\n                      genobj.generate_data.shared_strings[shared_str_position] = shared_str;\n                    } // Endif.\n\n\n                    break;\n                } // End of switch.\n\n              } // Endif.\n\n            } // End of for loop.\n\n          } // Endif.\n\n        } // End of for loop.\n\n      } // Endif.\n\n    } // End of for loop.\n\n\n    if (genobj.generate_data.total_strings) {\n      gen_private.plugs.intAddAnyResourceToParse('xl\\\\sharedStrings.xml', 'buffer', null, cbMakeXlsSharedStrings, false);\n      gen_private.type.msoffice.files_list.push({\n        name: '/xl/sharedStrings.xml',\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n        clear: 'generate'\n      });\n      gen_private.type.msoffice.rels_app.push({\n        type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n        target: 'sharedStrings.xml',\n        clear: 'generate'\n      });\n    } // Endif.\n\n  }\n  /**\r\n   * ???.\r\n   *\r\n   * @param {object} data Ignored by this callback function.\r\n   * @return Text string.\r\n   */\n\n\n  function cbMakeXlsStyles(data) {\n    return gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><fonts count=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"2\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/><xf applyAlignment=\"1\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\" xfId=\"0\"><alignment wrapText=\"1\"/></xf></cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleLight16\"/></styleSheet>';\n  }\n  /**\r\n   * ???.\r\n   *\r\n   * @param {object} data Ignored by this callback function.\r\n   * @return Text string.\r\n   */\n\n\n  function cbMakeXlsApp(data) {\n    var pagesCount = gen_private.pages.length;\n    var userName = genobj.options.author || genobj.options.creator || 'officegen';\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>' + pagesCount + '</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"' + pagesCount + '\" baseType=\"lpstr\">';\n\n    for (var i = 0, total_size = gen_private.pages.length; i < total_size; i++) {\n      outString += '<vt:lpstr>Sheet' + (i + 1) + '</vt:lpstr>';\n    } // End of for loop.\n\n\n    outString += '</vt:vector></TitlesOfParts><Company>' + userName + '</Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>12.0000</AppVersion></Properties>';\n    return outString;\n  }\n  /**\r\n   * ???.\r\n   *\r\n   * @param {object} data Ignored by this callback function.\r\n   * @return Text string.\r\n   */\n\n\n  function cbMakeXlsWorkbook(data) {\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"><fileVersion appName=\"xl\" lastEdited=\"4\" lowestEdited=\"4\" rupBuild=\"4507\"/><workbookPr defaultThemeVersion=\"124226\"/><bookViews><workbookView xWindow=\"120\" yWindow=\"75\" windowWidth=\"19095\" windowHeight=\"7485\"/></bookViews><sheets>';\n\n    for (var i = 0, total_size = gen_private.pages.length; i < total_size; i++) {\n      var sheetName = gen_private.pages[i].sheet.name || 'Sheet' + (i + 1);\n      var rId = gen_private.pages[i].relId;\n      outString += '<sheet name=\"' + sheetName + '\" sheetId=\"' + (i + 1) + '\" r:id=\"rId' + rId + '\"/>';\n    } // End of for loop.\n\n\n    outString += '</sheets><calcPr calcId=\"125725\"/></workbook>';\n    return outString;\n  }\n  /**\r\n   * Translate from the Excel displayed row name into index number.\r\n   *\r\n   * @param {string} cell_string Either the cell displayed position or the row displayed position.\r\n   * @param {boolean} ret_also_column ???.\r\n   * @return The cell's row Id.\r\n   */\n\n\n  function cbCellToNumber(cell_string, ret_also_column) {\n    var cellNumber = 0;\n    var cellIndex = 0;\n    var cellMax = cell_string.length;\n    var rowId = 0; // Converted from C++ (from DuckWriteC++):\n\n    while (cellIndex < cellMax) {\n      var curChar = cell_string.charCodeAt(cellIndex);\n\n      if (curChar >= 0x30 && curChar <= 0x39) {\n        rowId = parseInt(cell_string.slice(cellIndex), 10);\n        rowId = rowId > 0 ? rowId - 1 : 0;\n        break;\n      } else if (curChar >= 0x41 && curChar <= 0x5A) {\n        if (cellIndex > 0) {\n          cellNumber++;\n          cellNumber *= 0x5B - 0x41;\n        } // Endif.\n\n\n        cellNumber += curChar - 0x41;\n      } else if (curChar >= 0x61 && curChar <= 0x7A) {\n        if (cellIndex > 0) {\n          cellNumber++;\n          cellNumber *= 0x5B - 0x41;\n        } // Endif.\n\n\n        cellNumber += curChar - 0x61;\n      } // Endif.\n\n\n      cellIndex++;\n    } // End of while loop.\n\n\n    if (ret_also_column) {\n      return {\n        row: rowId,\n        column: cellNumber\n      };\n    } // Endif.\n\n\n    return cellNumber;\n  }\n  /**\r\n   * ???.\r\n   *\r\n   * @param {object} cell_number ???.\r\n   * @return ???.\r\n   */\n\n\n  function cbNumberToCell(cell_number) {\n    var outCell = '';\n    var curCell = cell_number;\n\n    while (curCell >= 0) {\n      outCell = String.fromCharCode(curCell % (0x5B - 0x41) + 0x41) + outCell;\n      if (curCell >= 0x5B - 0x41) curCell = Math.floor(curCell / (0x5B - 0x41)) - 1;else break;\n    } // End of while loop.\n\n\n    return outCell;\n  }\n  /**\r\n   * ???.\r\n   *\r\n   * @param {object} data The main sheet object.\r\n   * @return Text string.\r\n   */\n\n\n  function cbMakeXlsSheet(data) {\n    var outString = gen_private.plugs.type.msoffice.cbMakeMsOfficeBasicXml(data) + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">';\n    var maxX = 0;\n    var maxY = 0;\n    var curColMax;\n    var rowId;\n    var columnId;\n    var colsFound = 0; // Find the maximum cells area:\n\n    maxY = data.sheet.data.length ? data.sheet.data.length - 1 : 0;\n\n    for (rowId = 0, total_size_y = data.sheet.data.length; rowId < total_size_y; rowId++) {\n      if (data.sheet.data[rowId]) {\n        curColMax = data.sheet.data[rowId].length ? data.sheet.data[rowId].length - 1 : 0;\n        maxX = maxX < curColMax ? curColMax : maxX;\n      } // Endif.\n\n    } // End of for loop.\n\n\n    outString += '<dimension ref=\"A1:' + cbNumberToCell(maxX) + '' + (maxY + 1) + '\"/><sheetViews>';\n    outString += '<sheetView tabSelected=\"1\" workbookViewId=\"0\"/>'; // outString += '<selection activeCell=\"A1\" sqref=\"A1\"/>';\n\n    outString += '</sheetViews><sheetFormatPr defaultRowHeight=\"15\"/>';\n\n    if (data.sheet.width) {\n      data.sheet.width.forEach(function (value, indexId) {\n        if (typeof value === 'object') {\n          var outAttr = '';\n\n          if (typeof value.width === 'number' && value.width === value.width) {\n            outAttr = ' width=\"' + value.width + '\" customWidth=\"1\"';\n          } // Endif.\n\n\n          if (typeof value.styleCode === 'number' && value.styleCode === value.styleCode) {\n            outAttr = ' style=\"' + value.styleCode + '\"';\n          } // Endif.\n\n\n          if (!colsFound) {\n            outString += '<cols>';\n          } // Endif.\n\n\n          outString += \"<col min=\\\"\" + (value.colId + 1) + \"\\\" max=\\\"\" + (value.colId + 1) + \"\\\"\" + outAttr + \"/>\";\n          colsFound++; // Support for old code, not recommended:\n        } else if (typeof value === 'number') {\n          if (!colsFound) {\n            outString += '<cols>';\n          } // Endif.\n\n\n          outString += \"<col min=\\\"\" + (indexId + 1) + \"\\\" max=\\\"\" + (indexId + 1) + \"\\\" width=\\\"\" + value + \"\\\" customWidth=\\\"1\\\"/>\";\n          colsFound++;\n        } // Endif.\n\n      });\n\n      if (colsFound) {\n        outString += '</cols>';\n      } // Endif.\n\n    } // Endif.\n\n\n    outString += '<sheetData>';\n\n    for (rowId = 0, total_size_y = data.sheet.data.length; rowId < total_size_y; rowId++) {\n      if (data.sheet.data[rowId]) {\n        // Patch by arnesten <notifications@github.com>: Automatically support line breaks if used in cell + calculates row height:\n        var rowLines = 1;\n        data.sheet.data[rowId].forEach(function (cellData) {\n          if (typeof cellData === 'string') {\n            var candidate = cellData.split('\\n').length;\n            rowLines = Math.max(rowLines, candidate);\n          }\n        });\n        outString += '<row r=\"' + (rowId + 1) + '\" spans=\"1:' + data.sheet.data[rowId].length + '\" ht=\"' + rowLines * 15 + '\">'; // End of patch.\n\n        for (columnId = 0, total_size_x = data.sheet.data[rowId].length; columnId < total_size_x; columnId++) {\n          var cellData = data.sheet.data[rowId][columnId];\n\n          if (typeof cellData != 'undefined') {\n            var isString = '';\n            var cellOutData = '0';\n\n            switch (typeof cellData) {\n              case 'number':\n                cellOutData = cellData;\n                break;\n\n              case 'string':\n                cellOutData = genobj.generate_data.cell_strings[data.id][rowId][columnId];\n\n                if (cellData.indexOf('\\n') >= 0) {\n                  isString = ' s=\"1\" t=\"s\"';\n                } else {\n                  isString = ' t=\"s\"';\n                }\n\n                break;\n            } // End of switch.\n\n\n            outString += '<c r=\"' + cbNumberToCell(columnId) + '' + (rowId + 1) + '\"' + isString + '><v>' + cellOutData + '</v></c>';\n          } // Endif.\n\n        } // End of for loop.\n\n\n        outString += '</row>';\n      } // Endif.\n\n    } // End of for loop.\n\n\n    outString += '</sheetData><pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/></worksheet>';\n    return outString;\n  } // Prepare genobj for MS-Office:\n\n\n  msdoc.makemsdoc(genobj, new_type, options, gen_private, type_info);\n  gen_private.plugs.type.msoffice.makeOfficeGenerator('xl', 'workbook', {});\n  gen_private.features.page_name = 'sheets'; // This document type must have pages.\n  // On each generate we'll prepare the shared strings list:\n\n  genobj.on('beforeGen', cbPrepareXlsxToGenerate); // Create the plugins manager:\n\n  var plugsmanObj = new docplugman(genobj, gen_private, 'xlsx', setDefaultDocValues); // We'll register now any officegen internal plugin that we want to always use for Excel based documents:\n  // BMK_XLSX_PLUG:\n  // Dynamic loading of additional plugins requested by the user:\n\n  if (options.extraPlugs && typeof options.extraPlugs === 'object' && options.extraPlugs.forEach) {\n    options.extraPlugs.forEach(function (value) {\n      var newPlug;\n\n      if (value) {\n        if (typeof value === 'function') {\n          // You already loaded the plugin:\n          newPlug = value;\n        } else if (typeof value === 'string') {\n          // We need to load the plugin:\n          newPlug = require('./' + value);\n        } // Endif.\n\n      } // Endif.\n\n\n      plugsmanObj.plugsList.push(new newPlug(plugsmanObj));\n    });\n  } // Endif.\n\n\n  gen_private.type.msoffice.files_list.push({\n    name: '/xl/styles.xml',\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\n    clear: 'type'\n  }, {\n    name: '/xl/workbook.xml',\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n    clear: 'type'\n  });\n  gen_private.type.msoffice.rels_app.push({\n    type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n    target: 'styles.xml',\n    clear: 'type'\n  }, {\n    type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n    target: 'theme/theme1.xml',\n    clear: 'type'\n  });\n  gen_private.plugs.intAddAnyResourceToParse('docProps\\\\app.xml', 'buffer', null, cbMakeXlsApp, true);\n  gen_private.plugs.intAddAnyResourceToParse('xl\\\\styles.xml', 'buffer', null, cbMakeXlsStyles, true);\n  gen_private.plugs.intAddAnyResourceToParse('xl\\\\workbook.xml', 'buffer', null, cbMakeXlsWorkbook, true);\n  gen_private.plugs.intAddAnyResourceToParse('xl\\\\_rels\\\\workbook.xml.rels', 'buffer', gen_private.type.msoffice.rels_app, gen_private.plugs.type.msoffice.cbMakeRels, true); // ----- API for Excel documents: -----\n\n  /**\r\n   * Create a new sheet.\r\n   *\r\n   * This method creating a new Excel sheet.\r\n   */\n\n  genobj.makeNewSheet = function () {\n    var pageNumber = gen_private.pages.length; // The sheet object that the user will use:\n\n    var sheetObj = {\n      data: [],\n      // Place here all the data.\n      width: []\n    };\n    gen_private.pages[pageNumber] = {};\n    gen_private.pages[pageNumber].id = pageNumber;\n    gen_private.pages[pageNumber].relId = gen_private.type.msoffice.rels_app.length + 1;\n    gen_private.pages[pageNumber].sheet = sheetObj;\n    gen_private.type.msoffice.rels_app.push({\n      type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n      target: 'worksheets/sheet' + (pageNumber + 1) + '.xml',\n      clear: 'data'\n    });\n    gen_private.type.msoffice.files_list.push({\n      name: '/xl/worksheets/sheet' + (pageNumber + 1) + '.xml',\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n      clear: 'data'\n    });\n\n    sheetObj.setColumnWidth = function (colId, width) {\n      var colRec = null;\n      colId = cbCellToNumber(colId + '1', false);\n      sheetObj.width.every(function (value) {\n        if (value.colId === colId) {\n          colRec = value;\n          return false;\n        } // Endif.\n\n\n        return true;\n      });\n\n      if (!colRec) {\n        sheetObj.width.push({\n          colId: colId,\n          width: width\n        });\n        return;\n      } // Endif.\n\n\n      colRec.width = width;\n    };\n\n    sheetObj.setColumnCenter = function (colId) {\n      var colRec = null;\n      colId = cbCellToNumber(colId + '1', false);\n      sheetObj.width.every(function (value) {\n        if (value.colId === colId) {\n          colRec = value;\n          return false;\n        } // Endif.\n\n\n        return true;\n      });\n\n      if (!colRec) {\n        sheetObj.width.push({\n          colId: colId,\n          width: 9.140625,\n          styleCode: 1\n        });\n        return;\n      } // Endif.\n\n\n      colRec.styleCode = 1;\n    };\n\n    sheetObj.setCell = function (position, data_val) {\n      var rel_pos = cbCellToNumber(position, true);\n\n      if (!sheetObj.data[rel_pos.row]) {\n        sheetObj.data[rel_pos.row] = [];\n      } // Endif.\n\n\n      sheetObj.data[rel_pos.row][rel_pos.column] = data_val;\n    };\n\n    gen_private.plugs.intAddAnyResourceToParse('xl\\\\worksheets\\\\sheet' + (pageNumber + 1) + '.xml', 'buffer', gen_private.pages[pageNumber], cbMakeXlsSheet, false); // Signal to the plugins about a new sheet:\n\n    gen_private.features.type.xlsx.emitEvent('newPage', {\n      genobj: genobj,\n      page: sheetObj,\n      pageData: gen_private.pages[pageNumber],\n      pageNumber: pageNumber\n    });\n    return sheetObj;\n  }; // Tell all the features (plugins) to add extra API:\n\n\n  gen_private.features.type.xlsx.emitEvent('makeDocApi', genobj);\n  return this;\n}\n\nbaseobj.plugins.registerDocType('xlsx', makeXlsx, {}, baseobj.docType.SPREADSHEET, \"Microsoft Excel Document\");","map":null,"metadata":{},"sourceType":"script"}