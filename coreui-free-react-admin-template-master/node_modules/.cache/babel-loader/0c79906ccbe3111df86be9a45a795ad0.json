{"ast":null,"code":"//\n// fast-image-size - Simple stand alone module to just extract the image size from image file without using special image libraries.\n//\n// Please refer to README.md for this module's documentations.\n//\n// NOTE:\n// - Before changing this code please refer to the 'hacking the code section' on README.md.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nvar fast_image_size_info = require('./package.json');\n\nvar fs = require('fs');\n\nmodule.exports = exports = function exports(file_path, callback) {\n  // Internal options:\n  if (file_path == '@version@') {\n    return fast_image_size_info.version;\n  } // Endif.\n\n\n  function getJpgSize(buffer_data, retInfo) {\n    // Skip 5 chars, they are for signature\n    buffer_data = buffer_data.slice(4);\n    var i, next;\n\n    while (buffer_data.length) {\n      // read length of the next block\n      i = buffer_data.readUInt16BE(0); // 0xFFC0 is baseline(SOF)\n      // 0xFFC2 is progressive(SOF2)\n\n      next = buffer_data[i + 1];\n\n      if (next === 0xC0 || next === 0xC2) {\n        return {\n          'height': buffer_data.readUInt16BE(i + 5),\n          'width': buffer_data.readUInt16BE(i + 7)\n        };\n      } // move to the next block\n\n\n      buffer_data = buffer_data.slice(i + 2);\n    }\n  }\n\n  function parseHeaderData(buffer_data, callback_data) {\n    var retInfo = {}; // Detect GIF:\n\n    if (buffer_data[0] == 0x47 && buffer_data[1] == 0x49 && buffer_data[2] == 0x46) {\n      retInfo.type = 'gif';\n      retInfo.width = buffer_data[7] * 256 + buffer_data[6];\n      retInfo.height = buffer_data[9] * 256 + buffer_data[8]; // Detect JPEG:\n    } else if (buffer_data[0] == 0xFF && buffer_data[1] == 0xD8 && buffer_data[2] == 0xFF && buffer_data[3] == 0xE0) {\n      retInfo.type = 'jpeg';\n      var size = getJpgSize(buffer_data, retInfo);\n      retInfo.width = size.width;\n      retInfo.height = size.height; // Detect PNG:\n    } else if (buffer_data[0] == 137 && buffer_data[1] == 80 && buffer_data[2] == 78 && buffer_data[3] == 71 && buffer_data[4] == 13 && buffer_data[5] == 10 && buffer_data[6] == 26 && buffer_data[7] == 10) {\n      retInfo.type = 'png';\n\n      if (buffer_data[12] == 0x49 && buffer_data[13] == 0x48 && buffer_data[14] == 0x44 && buffer_data[15] == 0x52) {\n        retInfo.width = buffer_data[16] * 256 * 256 * 256 + buffer_data[17] * 256 * 256 + buffer_data[18] * 256 + buffer_data[19];\n        retInfo.height = buffer_data[20] * 256 * 256 * 256 + buffer_data[21] * 256 * 256 + buffer_data[22] * 256 + buffer_data[23];\n      } // Endif.\n      // Detect BMP:\n\n    } else if (buffer_data[0] == 0x42 && buffer_data[1] == 0x4D) {\n      retInfo.type = 'bmp';\n      retInfo.width = buffer_data[21] * 256 * 256 * 256 + buffer_data[20] * 256 * 256 + buffer_data[19] * 256 + buffer_data[18];\n      retInfo.height = buffer_data[25] * 256 * 256 * 256 + buffer_data[24] * 256 * 256 + buffer_data[23] * 256 + buffer_data[22];\n    } // Endif.\n\n\n    retInfo.image = file_path;\n\n    if (!retInfo.type) {\n      retInfo.type = 'unknown';\n    } // Endif.\n\n\n    if (callback_data) {\n      callback_data(retInfo);\n    } // Endif.\n\n\n    return retInfo;\n  }\n\n  ; // Async mode:\n\n  if (callback) {\n    fs.exists(file_path, function (exists) {\n      if (exists) {\n        fs.open(file_path, \"r\", function (error, fd) {\n          var bufferSize = fs.fstatSync(fd).size;\n          var buffer = new Buffer(bufferSize);\n          fs.read(fd, buffer, 0, bufferSize, null, function (error, bytesRead, buffer) {\n            fs.close(fd);\n            parseHeaderData(buffer, callback);\n          });\n        });\n      } else {\n        throw 'Error: Invalid file name.';\n      } // Endif.\n\n    }); // Sync mode:\n  } else {\n    var fd = fs.openSync(file_path, \"r\");\n    var bufferSize = fs.fstatSync(fd).size;\n    var buffer = new Buffer(bufferSize);\n    var bytesRead = fs.readSync(fd, buffer, 0, bufferSize, 0);\n    fs.closeSync(fd);\n    return parseHeaderData(buffer, null);\n  } // Endif.\n\n};","map":null,"metadata":{},"sourceType":"script"}