{"ast":null,"code":"var EMU = 914400; // OfficeXML measures in English Metric Units\n\nmodule.exports = {\n  // assume passed in an array of row objects\n  getTable: function getTable(rows, options) {\n    var options = options || {};\n    options.tabstyle = options.tabstyle ? options.tabstyle : \"{5C22544A-7EE6-4342-B048-85BDC9FD1C3A}\";\n\n    if (options.columnWidth === undefined) {\n      options.columnWidth = 8 / rows[0].length * EMU;\n    }\n\n    var self = this;\n    return self._getBase(rows.map(function (row, row_idx) {\n      return self._getRow(row.map(function (val, idx) {\n        var cellVal = val,\n            cellOptions = options;\n\n        if (typeof val === 'object') {\n          //Cell-specific formatting passed in, override table options\n          cellOptions = val.hasOwnProperty('opts') ? val.opts : options;\n          cellVal = val.hasOwnProperty('val') ? val.val : val;\n        }\n\n        return self._getCell(cellVal, cellOptions, idx, row_idx);\n      }), options);\n    }), self._getColSpecs(rows, options), options);\n  },\n  \"_getBase\": function _getBase(rowSpecs, colSpecs, options) {\n    var self = this;\n    return {\n      \"p:graphicFrame\": {\n        \"p:nvGraphicFramePr\": {\n          \"p:cNvPr\": {\n            \"@id\": \"6\",\n            \"@name\": \"Table 5\"\n          },\n          \"p:cNvGraphicFramePr\": {\n            \"a:graphicFrameLocks\": {\n              \"@noGrp\": \"1\"\n            }\n          },\n          \"p:nvPr\": {\n            \"p:extLst\": {\n              \"p:ext\": {\n                \"@uri\": \"{D42A27DB-BD31-4B8C-83A1-F6EECF244321}\",\n                \"p14:modId\": {\n                  \"@xmlns:p14\": \"http://schemas.microsoft.com/office/powerpoint/2010/main\",\n                  \"@val\": \"1579011935\"\n                }\n              }\n            }\n          }\n        },\n        \"p:xfrm\": {\n          \"a:off\": {\n            \"@x\": options.x || \"1524000\",\n            \"@y\": options.y || \"1397000\"\n          },\n          \"a:ext\": {\n            \"@cx\": options.cx || \"6096000\",\n            \"@cy\": options.cy || \"1483360\"\n          }\n        },\n        \"a:graphic\": {\n          \"a:graphicData\": {\n            \"@uri\": \"http://schemas.openxmlformats.org/drawingml/2006/table\",\n            \"a:tbl\": {\n              \"a:tblPr\": {\n                \"@firstRow\": \"1\",\n                \"@bandRow\": \"1\",\n                \"a:tableStyleId\": options.tabstyle //\"{5C22544A-7EE6-4342-B048-85BDC9FD1C3A}\"\n\n              },\n              \"a:tblGrid\": {\n                \"#list\": colSpecs\n              },\n              \"#list\": [rowSpecs] // replace this with  an array of table row objects\n\n            }\n          }\n        }\n      }\n    };\n  },\n  _getColSpecs: function _getColSpecs(rows, options) {\n    var self = this;\n    return rows[0].map(function (val, idx) {\n      return self._tblGrid(idx, options);\n    });\n  },\n  _tblGrid: function _tblGrid(idx, options) {\n    return {\n      \"a:gridCol\": {\n        \"@w\": options.columnWidths ? options.columnWidths[idx] : options.columnWidth || \"0\" //|| \"2048000\"\n\n      }\n    };\n  },\n  _getRow: function _getRow(cells, options) {\n    return {\n      \"a:tr\": {\n        \"@h\": options.rowHeight || \"0\",\n        //|| \"370840\",\n        \"#list\": [cells] // populate this with an array of table cell objects\n\n      }\n    };\n  },\n  _getCell: function _getCell(val, options, idx, row_idx) {\n    var font_size = options.font_size || 14;\n    var font_face = options.font_face || \"Times New Roman\";\n    var cellObject = {\n      \"a:tc\": {\n        \"a:txBody\": {\n          \"a:bodyPr\": {},\n          \"a:lstStyle\": {},\n          \"a:p\": {\n            \"a:pPr\": {\n              \"@algn\": options.align ? options.align[idx] ? options.align[idx] : options.align : 'ctr'\n            },\n            \"a:r\": {\n              \"a:rPr\": {\n                \"@lang\": \"en-US\",\n                \"@sz\": \"\" + font_size * 100,\n                \"@dirty\": \"0\",\n                \"@smtClean\": \"0\",\n                \"@b\": options.bold ? options.bold[row_idx] ? options.bold[row_idx][idx] ? options.bold[row_idx][idx] : options.bold[row_idx] : options.bold : \"0\",\n                \"@i\": options.italics ? options.italics[row_idx] ? options.italics[row_idx][idx] ? options.italics[row_idx][idx] : options.italics[row_idx] : options.italics : \"0\",\n                \"a:latin\": {\n                  \"@typeface\": font_face\n                },\n                \"a:cs\": {\n                  \"@typeface\": font_face\n                }\n              },\n              \"a:t\": val // this is the cell value\n\n            },\n            \"a:endParaRPr\": {\n              \"@lang\": \"en-US\",\n              \"@sz\": \"\" + font_size * 100,\n              \"@dirty\": \"0\",\n              \"a:latin\": {\n                \"@typeface\": font_face\n              },\n              \"a:cs\": {\n                \"@typeface\": font_face\n              }\n            }\n          }\n        },\n        \"a:tcPr\": {}\n      }\n    };\n\n    if (options.hasOwnProperty('fill_color')) {\n      //Apply background fill to table cell\n      cellObject[\"a:tc\"][\"a:tcPr\"][\"a:solidFill\"] = {\n        \"a:srgbClr\": {\n          \"@val\": options.fill_color\n        }\n      };\n    }\n\n    if (options.hasOwnProperty('font_color')) {\n      //Apply color to text run\n      cellObject[\"a:tc\"][\"a:txBody\"][\"a:p\"][\"a:r\"][\"a:rPr\"][\"a:solidFill\"] = {\n        \"a:srgbClr\": {\n          \"@val\": options.font_color\n        }\n      };\n    }\n\n    return cellObject;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}