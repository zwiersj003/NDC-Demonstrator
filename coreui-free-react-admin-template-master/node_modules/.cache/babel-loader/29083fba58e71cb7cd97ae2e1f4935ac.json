{"ast":null,"code":"/// @author vtloc\n/// @date 2014Jan09\n/// @author GradualStudent\n/// @date 2015jan06\n/// This module's purpose is to transform\n///\nvar _ = require('lodash'); // replacing underscore to get merge function\n\n\nvar xmlBuilder = require('xmlbuilder');\n\nvar fs = require('fs');\n\nvar _chartSpecs = require('./charts');\n\nfunction OfficeChart(chartInfo) {\n  if (chartInfo instanceof OfficeChart) {\n    return chartInfo;\n  }\n\n  return {\n    chartSpec: null,\n    // Javascript object that represents the XML tree for the PowerPoint chart\n    toXML: function toXML() {\n      return xmlBuilder.create(this.chartSpec, {\n        version: '1.0',\n        encoding: 'UTF-8',\n        standalone: true\n      }).end({\n        pretty: true,\n        indent: '  ',\n        newline: '\\n'\n      });\n    },\n    toJSON: function toJSON() {\n      return this.chartSpec;\n    },\n    getClass: function getClass() {\n      return \"OfficeChart\";\n    },\n    ///\n    /// @brief Create XML representation of chart object\n    /// @param[chartInfo] object\n    ///  {\n    ///\t\t\ttitle: 'eSurvey chart',\n    ///\t\t\tdata:  [ // array of series\n    ///\t\t\t\t{\n    ///\t\t\t\t\tname: 'Income',\n    ///\t\t\t\t\tlabels: ['2005', '2006', '2007', '2008', '2009'],\n    ///\t\t\t\t\tvalues: [23.5, 26.2, 30.1, 29.5, 24.6],\n    ///         color: 'ff0000'\n    ///\t\t\t\t}\n    ///\t\t\t],\n    ///     overlap:  \"0\",\n    ///     gapWidth: \"150\"\n    ///\n    /// \t}\n    initialize: function initialize(chartInfo) {\n      if (chartInfo.getClass && chartInfo.getClass() == 'OfficeChart') {\n        return chartInfo;\n      } // overlap [\"50\"] is handled as an option within the chartbase\n      // gapWidth [\"150\"] is handled as an option within the chartbase\n      // valAxisCrossAtMaxCategory [true|false] is handled as an option within the chart base\n      // catAxisReverseOrder [true|false] is handled as an option within the chart base\n\n\n      this.chartSpec = OfficeChart.getChartBase(chartInfo); // get foundation XML for the chart type\n      // Below are methods for handling options with more complex XML to mix in\n\n      this.setData(chartInfo['data']);\n      this.setTitle(chartInfo.title || chartInfo.name);\n      this.setValAxisTitle(chartInfo.valAxisTitle);\n      this.setCatAxisTitle(chartInfo.catAxisTitle);\n      this.setValAxisNumFmt(chartInfo.valAxisNumFmt);\n      this.setValAxisScale(chartInfo.valAxisMinValue, chartInfo.valAxisMaxValue);\n      this.setTextSize(chartInfo.fontSize);\n      this.mergeChartXml(chartInfo.xml);\n      this.setValAxisMajorGridlines(chartInfo.valAxisMajorGridlines);\n      this.setValAxisMinorGridlines(chartInfo.valAxisMinorGridlines);\n      return this;\n    },\n    setTextSize: function setTextSize(textSize) {\n      if (textSize !== undefined) {\n        var textRef = this._text(textSize);\n\n        _.merge(this.chartSpec['c:chartSpace'], textRef);\n      }\n    },\n    setTitle: function setTitle(title) {\n      if (title !== undefined) {\n        var titleRef = this._title(chartInfo.title || chartInfo.name);\n\n        _.merge(this.chartSpec['c:chartSpace']['c:chart'], titleRef);\n      }\n    },\n    setValAxisTitle: function setValAxisTitle(title) {\n      if (title) {\n        var titleRef = this._title(title);\n\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'], titleRef);\n      }\n    },\n    setCatAxisTitle: function setCatAxisTitle(title) {\n      if (title) {\n        var titleRef = this._title(title);\n\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:catAx'], titleRef);\n      }\n    },\n    setValAxisNumFmt: function setValAxisNumFmt(format) {\n      if (format !== undefined) {\n        var numFmtRef = this._numFmt(format);\n\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'], numFmtRef);\n      }\n    },\n    setValAxisScale: function setValAxisScale(min, max) {\n      if (min !== undefined || max !== undefined) {\n        var scalingRef = this._scaling(min, max);\n\n        _.merge(this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx'], scalingRef);\n      }\n    },\n    mergeChartXml: function mergeChartXml(xml) {\n      if (xml !== undefined) {\n        _.merge(this.chartSpec['c:chartSpace'], xml);\n      }\n    },\n    setValAxisMajorGridlines: function setValAxisMajorGridlines(boolean) {\n      if (boolean) {\n        this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx']['c:majorGridlines'] = {};\n      }\n    },\n    setValAxisMinorGridlines: function setValAxisMinorGridlines(boolean) {\n      if (boolean) {\n        this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:valAx']['c:minorGridlines'] = {};\n      }\n    },\n    setData: function setData(data) {\n      if (data) {\n        this.data = data; // Mix in data series\n\n        if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']['#list'];\n        } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:areaChart']) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:areaChart']['#list'];\n        } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:barChart']) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:barChart']['#list'];\n        } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:doughnutChart']) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:doughnutChart']['#list'];\n        } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:lineChart']['#list'];\n        } else if (this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:pieChart']) {\n          seriesDataRef = this.chartSpec['c:chartSpace']['c:chart']['c:plotArea']['c:pieChart']['#list'];\n        } else throw new Error(\"Can't add data to chart that is not initialized or not a recognized type\"); // the barChart/pieChart objects has other attributes too, so we push the series data on, not replace it\n\n\n        if (chartInfo['data']) {\n          var seriesData = this.getSeriesRef(chartInfo['data']);\n\n          for (var i = 0; i < seriesData.length; i++) {\n            seriesDataRef.push(seriesData[i]);\n          }\n        }\n      }\n\n      return this;\n    },\n    ///\n    /// @brief Transform an array of string into an office's compliance structure\n    ///\n    /// @param[in] region String\n    ///\t\tThe reference cell of the string, for example: $A$1\n    /// @param[in] stringArr\n    ///\t\tAn array of string, for example: ['foo', 'bar']\n    ///\n    _strRef: function _strRef(region, stringArr) {\n      var obj = {\n        'c:strRef': {\n          'c:f': region,\n          'c:strCache': function cStrCache() {\n            var result = {};\n            result['c:ptCount'] = {\n              '@val': stringArr.length\n            };\n            result['#list'] = [];\n\n            for (var i = 0; i < stringArr.length; i++) {\n              result['#list'].push({\n                'c:pt': {\n                  '@idx': i,\n                  'c:v': stringArr[i]\n                }\n              });\n            }\n\n            return result;\n          }\n        }\n      };\n      return obj;\n    },\n    ///\n    /// @brief Transform an array of numbers into an office's compliance structure\n    ///\n    /// @param[in] region String\n    ///\t\tThe reference cell of the string, for example: $A$1\n    /// @param[in] numArr\n    ///\t\tAn array of numArr, for example: [4, 7, 8]\n    /// @param[in] formatCode\n    ///\t\tA string describe the number's format. Example: General\n    ///\n    _numRef: function _numRef(region, numArr, formatCode) {\n      var obj = {\n        'c:numRef': {\n          'c:f': region,\n          'c:numCache': {\n            'c:formatCode': formatCode,\n            'c:ptCount': {\n              '@val': '' + numArr.length\n            },\n            '#list': function list() {\n              result = [];\n\n              for (var i = 0; i < numArr.length; i++) {\n                result.push({\n                  'c:pt': {\n                    '@idx': i,\n                    'c:v': numArr[i].toString()\n                  }\n                });\n              }\n\n              return result;\n            }\n          }\n        }\n      };\n      return obj;\n    },\n    _numFmt: function _numFmt(formatCode) {\n      return {\n        \"c:numFmt\": {\n          \"@formatCode\": formatCode ? formatCode : \"General\",\n          \"@sourceLinked\": formatCode ? \"0\" : \"1\"\n        }\n      };\n    },\n    ///\n    /// @brief Transform an array of string into an office's compliance structure\n    ///\n    /// @param[in] colorArr\n    ///     An array of colorArr, for example: ['ff0000', '00ff00', '0000ff']\n    ///\n    _colorRef: function _colorRef(colorArr) {\n      var arr = [];\n\n      for (var i = 0; i < colorArr.length; i++) {\n        arr.push({\n          'c:dPt': {\n            'c:idx': {\n              '@val': i\n            },\n            'c:bubble3D': {\n              '@val': 0\n            },\n            'c:spPr': {\n              'a:solidFill': {\n                'a:srgbClr': {\n                  '@val': colorArr[i].toString()\n                }\n              }\n            }\n          }\n        });\n      }\n\n      return arr;\n    },\n    ///\n    /// @brief Transform an array of string into an office's compliance structure\n    ///\n    /// @param[in] row int\n    ///\t\tRow index.\n    /// @param[in] col int\n    ///\t\tCol index.\n    /// @param[in] isRowAbsolute boolean\n    ///\t\tWill add $ into cell's address if this parameter is true.\n    /// @param[in] isColAbsolute boolean\n    ///\t\tWill add $ into cell's address if this parameter is true.\n    ///\n    _rowColToSheetAddress: function _rowColToSheetAddress(row, col, isRowAbsolute, isColAbsolute) {\n      var address = \"\";\n      if (isColAbsolute) address += '$'; // these lines of code will transform the number 1-26 into A->Z\n      // used in excel's cell's coordination\n\n      while (col > 0) {\n        var num = col % 26;\n        col = (col - num) / 26;\n        address += String.fromCharCode(65 + num - 1);\n      }\n\n      if (isRowAbsolute) address += '$';\n      address += row;\n      return address;\n    },\n    /// @brief returns XML snippet for a chart dataseries\n    _ser: function _ser(serie, i) {\n      var rc2a = this._rowColToSheetAddress; // shortcut\n\n      var serieData = {\n        'c:ser': {\n          'c:idx': {\n            '@val': i\n          },\n          'c:order': {\n            '@val': i\n          },\n          'c:tx': this._strRef('Sheet1!' + rc2a(1, 2 + i, true, true), [serie.name]),\n          // serie's value\n          'c:invertIfNegative': {\n            '@val': '0'\n          },\n          'c:cat': this._strRef('Sheet1!' + rc2a(2, 1, true, true) + ':' + rc2a(2 + serie.labels.length - 1, 1, true, true), serie.labels),\n          'c:val': this._numRef('Sheet1!' + rc2a(2, 2 + i, true, true) + ':' + rc2a(2 + serie.labels.length - 1, 2 + i, true, true), serie.values, \"General\")\n        }\n      };\n\n      if (serie.color) {\n        serieData['c:ser']['c:spPr'] = {\n          'a:solidFill': {\n            'a:srgbClr': {\n              '@val': serie.color\n            }\n          }\n        };\n      } else if (serie.schemeColor) {\n        serieData['c:ser']['c:spPr'] = {\n          'a:solidFill': {\n            'a:schemeClr': {\n              '@val': serie.schemeColor\n            }\n          }\n        };\n      }\n\n      if (serie.xml) {\n        serieData['c:ser'] = _.merge(serieData['c:ser'], serie.xml);\n      } // for pie charts\n\n\n      if (serie.colors) {\n        serieData['c:ser']['#list'] = this._colorRef(serie.colors);\n      }\n\n      return serieData;\n    },\n    /// @brief returns XML snippet for a chart dataseries\n    getSeriesRef: function getSeriesRef(data) {\n      return data.map(this._ser, this);\n    },\n    /// @brief returns XML snippet for axis number format\n    ///  e.g. \"$0\" for US currency, \"0%\" for percentages\n    xmlValAxisFormat: function xmlValAxisFormat(formatCode) {\n      return {\n        \"c:chartSpace\": {\n          \"c:chart\": {\n            \"c:plotArea\": {\n              \"c:valAx\": {\n                \"c:majorGridlines\": {},\n                \"c:numFmt\": {\n                  \"@formatCode\": formatCode,\n                  \"@sourceLinked\": \"0\"\n                }\n              }\n            }\n          }\n        }\n      };\n    },\n    /// @brief returns XML snippet for an axis scale\n    /// currently just min/max are supported\n\n    /*\r\n      <c:scaling><c:orientation val=\"minMax\"/>\r\n        <c:max val=\"24.0\"/>\r\n        <c:min val=\"24.0\"/>\r\n      </c:scaling>\r\n    */\n    _scaling: function _scaling(minValue, maxValue) {\n      var ref = {\n        \"c:scaling\": {\n          \"c:orientation\": {\n            \"@val\": \"minMax\"\n          }\n        }\n      };\n\n      if (maxValue != undefined) {\n        ref[\"c:scaling\"][\"c:max\"] = {\n          \"@val\": \"\" + (maxValue || \"\")\n        };\n      }\n\n      if (minValue != undefined) {\n        ref[\"c:scaling\"][\"c:min\"] = {\n          \"@val\": \"\" + (minValue || \"\")\n        };\n      }\n\n      return ref;\n    },\n    _text: function _text(textSize) {\n      return {\n        \"c:txPr\": {\n          \"a:bodyPr\": {},\n          \"a:listStyle\": {},\n          \"a:p\": {\n            \"a:pPr\": {\n              \"a:defRPr\": {\n                \"@sz\": textSize\n              }\n            },\n            \"a:endParaRPr\": {\n              \"@lang\": \"en-US\"\n            }\n          }\n        }\n      };\n    },\n    /// @brief returns XML snippet for an axis title\n    _title: function _title(title) {\n      if (typeof title == 'object') return title; // assume it's an XML representations\n\n      return {\n        \"c:title\": {\n          \"c:tx\": {\n            \"c:rich\": {\n              \"a:bodyPr\": {},\n              \"a:lstStyle\": {},\n              \"a:p\": {\n                \"a:pPr\": {\n                  \"a:defRPr\": {}\n                },\n                \"a:r\": {\n                  \"a:rPr\": {\n                    \"@lang\": \"en-US\",\n                    \"@dirty\": \"0\",\n                    \"@smtClean\": \"0\"\n                  },\n                  \"a:t\": title\n                },\n                \"a:endParaRPr\": {\n                  \"@lang\": \"en-US\",\n                  \"@dirty\": \"0\"\n                }\n              }\n            }\n          },\n          \"c:layout\": {},\n          \"c:overlay\": {\n            \"@val\": \"0\"\n          }\n        }\n      };\n    }\n  }.initialize(chartInfo);\n}\n\nOfficeChart.getChartBase = function (chartInfo) {\n  var chartBase;\n\n  if (typeof chartInfo == 'string') {\n    chartBase = _chartSpecs[chartInfo]();\n  } else if (typeof chartInfo.renderType == 'string') {\n    chartBase = _chartSpecs[chartInfo.renderType](chartInfo);\n  } else if (chartInfo.xml) {\n    chartBase = chartInfo.xml;\n  } else {\n    throw new Error(\"invalid chart type\");\n  } // return deep copy so can create multiple charts from same base within one PowerPoint document\n\n\n  return JSON.parse(JSON.stringify(chartBase));\n};\n\nmodule.exports = OfficeChart;\n/***********************************************************************************************************************\r\n // Column chart\r\n new OfficeChart({\r\n  title: 'eSurvey chart',\r\n  renderType: 'column',\r\n  data: [ // array of series\r\n    {\r\n      name: 'Income',\r\n      labels: ['2005', '2006', '2007', '2008', '2009'],\r\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\r\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\r\n    },\r\n    {\r\n      name: 'Expense',\r\n      labels: ['2005', '2006', '2007', '2008', '2009'],\r\n      values: [18.1, 22.8, 23.9, 25.1, 25],\r\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\r\n    }\r\n  ]\r\n});\r\n\r\n\r\n // Pie chart\r\n new OfficeChart({\r\n  title: 'eSurvey chart',\r\n  renderType: 'pie',\r\n  data: [ // array of series\r\n    {\r\n      name: 'Income',\r\n      labels: ['2005', '2006', '2007', '2008', '2009'],\r\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\r\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\r\n    }\r\n  ]\r\n});\r\n\r\n\r\n // Clustered bar chat\r\n new OfficeChart({\r\n  title: 'eSurvey chart',\r\n  renderType: 'group-bar',\r\n  data: [ // array of series\r\n    {\r\n      name: 'Income',\r\n      labels: ['2005', '2006', '2007', '2008', '2009'],\r\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\r\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', '00ffff'] // optional\r\n    }\r\n  ]\r\n});\r\n\r\n ***********************************************************************************************************************/","map":null,"metadata":{},"sourceType":"script"}