{"ast":null,"code":"'use strict';\n\nvar isWin = process.platform === 'win32';\n\nvar resolveCommand = require('./util/resolveCommand');\n\nvar isNode10 = process.version.indexOf('v0.10.') === 0;\n\nfunction notFoundError(command, syscall) {\n  var err;\n  err = new Error(syscall + ' ' + command + ' ENOENT');\n  err.code = err.errno = 'ENOENT';\n  err.syscall = syscall + ' ' + command;\n  return err;\n}\n\nfunction hookChildProcess(cp, parsed) {\n  var originalEmit;\n\n  if (!isWin) {\n    return;\n  }\n\n  originalEmit = cp.emit;\n\n  cp.emit = function (name, arg1) {\n    var err; // If emitting \"exit\" event and exit code is 1, we need to check if\n    // the command exists and emit an \"error\" instead\n    // See: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n\n    if (name === 'exit') {\n      err = verifyENOENT(arg1, parsed, 'spawn');\n\n      if (err) {\n        return originalEmit.call(cp, 'error', err);\n      }\n    }\n\n    return originalEmit.apply(cp, arguments);\n  };\n}\n\nfunction verifyENOENT(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawn');\n  }\n\n  return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawnSync');\n  } // If we are in node 10, then we are using spawn-sync; if it exited\n  // with -1 it probably means that the command does not exist\n\n\n  if (isNode10 && status === -1) {\n    parsed.file = isWin ? parsed.file : resolveCommand(parsed.original);\n\n    if (!parsed.file) {\n      return notFoundError(parsed.original, 'spawnSync');\n    }\n  }\n\n  return null;\n}\n\nmodule.exports.hookChildProcess = hookChildProcess;\nmodule.exports.verifyENOENT = verifyENOENT;\nmodule.exports.verifyENOENTSync = verifyENOENTSync;\nmodule.exports.notFoundError = notFoundError;","map":null,"metadata":{},"sourceType":"script"}