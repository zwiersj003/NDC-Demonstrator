{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WordRenderer = undefined;\n\nvar _RendererHostConfig;\n\nvar _emptyObject = require('fbjs/lib/emptyObject');\n\nvar _emptyObject2 = _interopRequireDefault(_emptyObject);\n\nvar _createElement = require('../utils/createElement');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable */\n\n\nvar Reconciler = require('react-reconciler');\n\nvar RendererHostConfig = (_RendererHostConfig = {\n  appendInitialChild: function appendInitialChild(parentInstance, child) {\n    if (parentInstance.appendChild) {\n      parentInstance.appendChild(child);\n    } else {\n      parentInstance.document = child;\n    }\n  },\n  createInstance: function createInstance(type, props, internalInstanceHandle) {\n    return (0, _createElement.createElement)(type, props);\n  },\n  createTextInstance: function createTextInstance(text, rootContainerInstance, internalInstanceHandle) {\n    return text;\n  },\n  finalizeInitialChildren: function finalizeInitialChildren(wordElement, type, props) {\n    return false;\n  },\n  getPublicInstance: function getPublicInstance(inst) {\n    return inst;\n  },\n  prepareForCommit: function prepareForCommit() {// noop\n  },\n  prepareUpdate: function prepareUpdate(wordElement, type, oldProps, newProps) {\n    return true;\n  },\n  resetAfterCommit: function resetAfterCommit() {// noop\n  },\n  resetTextContent: function resetTextContent(wordElement) {// Redocx does not have a text node like DOM\n  }\n}, _defineProperty(_RendererHostConfig, 'createInstance', function createInstance(type, props, internalInstanceHandle) {\n  // 'internalInstanceHandle' is not transparent here. So use host context methods\n  // to get data from roots\n  return (0, _createElement.createElement)(type, props);\n}), _defineProperty(_RendererHostConfig, 'getRootHostContext', function getRootHostContext(instance) {\n  // getHostContextNode here updates the internal state of createElement and stores a ref to current instance\n  return (0, _createElement.getHostContextNode)(instance);\n}), _defineProperty(_RendererHostConfig, 'getChildHostContext', function getChildHostContext() {\n  return _emptyObject2.default;\n}), _defineProperty(_RendererHostConfig, 'shouldSetTextContent', function shouldSetTextContent(type, props) {\n  return false; // Redocx does not have a text node like DOM\n}), _defineProperty(_RendererHostConfig, 'now', function now() {}), _defineProperty(_RendererHostConfig, 'useSyncScheduling', true), _defineProperty(_RendererHostConfig, 'mutation', {\n  appendChild: function appendChild(parentInstance, child) {\n    if (parentInstance.appendChild) {\n      parentInstance.appendChild(child);\n    } else {\n      parentInstance.document = child;\n    }\n  },\n  appendChildToContainer: function appendChildToContainer(parentInstance, child) {\n    if (parentInstance.appendChild) {\n      parentInstance.appendChild(child);\n    } else {\n      parentInstance.document = child;\n    }\n  },\n  removeChild: function removeChild(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n  removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n  insertBefore: function insertBefore(parentInstance, child, beforeChild) {// noob\n  },\n  commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {// noop\n  },\n  commitMount: function commitMount(instance, updatePayload, type, oldProps, newProps) {// noop\n  },\n  commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {\n    textInstance.children = newText;\n  }\n}), _RendererHostConfig);\nvar WordRenderer = Reconciler(RendererHostConfig);\nexports.WordRenderer = WordRenderer;","map":null,"metadata":{},"sourceType":"script"}