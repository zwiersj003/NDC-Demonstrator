{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styleSerializer = exports.applyImageProps = exports.applyStyles = undefined;\n\nvar _chromaJs = require('chroma-js');\n\nvar _chromaJs2 = _interopRequireDefault(_chromaJs);\n\nvar _isHexadecimal = require('validator/lib/isHexadecimal');\n\nvar _isHexadecimal2 = _interopRequireDefault(_isHexadecimal);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Get the hex value or the color name\n * @param {string} value hex or color name\n */\n\n\nfunction getHexOrColor(value) {\n  if (typeof value === 'undefined') {\n    return (0, _isHexadecimal2.default)('undefined');\n  } else if ((0, _isHexadecimal2.default)(value)) {\n    return value.replace('#', '');\n  }\n\n  return (0, _chromaJs2.default)(value).hex().replace('#', '');\n}\n/**\n * Function to apply the styles to a component\n * @param {Object} props Component props\n */\n\n\nfunction applyStyles(props) {\n  if (Object.keys(props) === 0) {\n    return {};\n  }\n\n  var backgroundColor = props.backgroundColor,\n      color = props.color,\n      fontSize = props.fontSize,\n      fontFace = props.fontFace,\n      bold = props.bold,\n      border = props.border,\n      underline = props.underline,\n      italic = props.italic,\n      highlight = props.highlight,\n      borderSize = props.borderSize,\n      borderColor = props.borderColor,\n      link = props.link;\n  return {\n    back: getHexOrColor(backgroundColor),\n    color: getHexOrColor(color),\n    highlight: getHexOrColor(highlight),\n    italic: italic,\n    underline: underline,\n    bold: bold,\n    border: border,\n    borderColor: getHexOrColor(borderColor),\n    borderSize: borderSize,\n    font_size: fontSize,\n    font_face: fontFace,\n    link: link\n  };\n}\n/**\n * Function to apply style attributes to <Image /> component\n * @param {Object} props Component props\n */\n\n\nfunction imageProps(props) {\n  var width = props.width,\n      height = props.height;\n  return {\n    cx: parseInt(width, 10),\n    cy: parseInt(height, 10)\n  };\n}\n/**\n * Function to apply style attributes to <Image /> component without style prop \n * @param {Object} Component props\n */\n\n\nfunction addStyles(props) {\n  return {\n    cx: props.width ? parseInt(props.width, 10) : null,\n    cy: props.height ? parseInt(props.height, 10) : null\n  };\n}\n/**\n * Function to add <Image /> related attributes with or without using style prop\n * @param {Object} props Component props\n */\n\n\nfunction applyImageProps(props) {\n  return props.style ? imageProps(props.style) : addStyles(props);\n}\n/**\n * Function to serialize style properties for <Table /> component according to open office xml\n * @param {Object} values style attributes for table\n */\n\n\nfunction styleSerializer(values) {\n  var bold = values.bold,\n      size = values.size,\n      color = values.color,\n      align = values.align,\n      vAlign = values.vAlign,\n      fontFamily = values.fontFamily,\n      fill = values.fill,\n      cellColWidth = values.cellColWidth;\n  return {\n    b: bold,\n    sz: size,\n    color: getHexOrColor(color),\n    align: align,\n    vAlign: vAlign,\n    fontFamily: fontFamily,\n    fill: getHexOrColor(fill),\n    cellColWidth: cellColWidth\n  };\n}\n\nexports.applyStyles = applyStyles;\nexports.applyImageProps = applyImageProps;\nexports.styleSerializer = styleSerializer;","map":null,"metadata":{},"sourceType":"script"}