{"ast":null,"code":"//\n// officegen: basic OpenOffice common code\n//\n// Please refer to README.md for this module's documentations.\n//\n// NOTE:\n// - Before changing this code please refer to the hacking the code section on README.md.\n//\n// Copyright (c) 2013 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * Basicgen common utilities used by any document type related to Open Office.\n */\nvar baseobj = require(\"./basicgen.js\");\n/**\n * Extend officegen object with OpenOffice support.\n *\n * This method extending the given officegen object with the common OpenOffice code.\n *\n * @param {object} genobj The object to extend.\n * @param {object} new_type The type of object to create.\n * @param {object} options The object's options.\n * @param {object} gen_private Access to the internals of this object.\n * @param {object} type_info Additional information about this type.\n * @constructor\n * @name makeoodoc\n */\n\n\nfunction makeoodoc(genobj, new_type, options, gen_private, type_info) {\n  /**\n   * Get the string that opening every Office XML type.\n   * <br /><br />\n   *\n   * Every OpenOffice XML resource will have this header at the begining of the file.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n  gen_private.plugs.type.openoffice.makeOpenOfficeBasicXml = function (data) {\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n  }; // Basic API for plugins:\n\n\n  gen_private.plugs.type.openoffice = {};\n  /**\n   * Create the mimetpe resource.\n   * <br /><br />\n   *\n   * Every OpenOffice based document must have this resource.\n   *\n   * @param {object} data Ignored by this callback function.\n   * @return Text string.\n   */\n\n  function makeOpenOfficeMimeType(data) {\n    return 'application/vnd.oasis.opendocument.' + gen_private.mixed.res_data.mimeType;\n  }\n  /**\n   * Generate the manifest XML resource.\n   * <br /><br />\n   *\n   * Tbis function creating the manifest resource.\n   *\n   * @param {object} data Array filled with all the resources information.\n   * @return Text string.\n   */\n\n\n  gen_private.plugs.type.openoffice.makeManifest = function (data) {\n    var outString = gen_private.plugs.type.openoffice.makeOpenOfficeBasicXml(data);\n    outString += '<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\">\\n'; // Add all the rels records inside the data array:\n\n    for (var i = 0, total_size = data.length; i < total_size; i++) {\n      if (typeof data[i] != 'undefined') {\n        outString += ' <manifest:file-entry manifest:media-type=\"' + data[i].type + '\" manifest:full-path=\"' + data[i].target + '\"/>\\n';\n      } // Endif.\n\n    } // End of for loop.\n\n\n    outString += '</manifest:manifest>\\n';\n    return outString;\n  };\n  /**\n   * Prepare the officegen object to OpenOffice documents.\n   * <br /><br />\n   *\n   * Every plugin that implementing gemenrating OpenOffice document must call this method to initialize \n   * the common stuff.\n   *\n   * @param {object} mimeType The mime type of this document.\n   * @param {object} ext_opt Optional settings (unused right now).\n   */\n\n\n  gen_private.plugs.type.openoffice.makeOfficeGenerator = function (mimeType, ext_opt) {\n    gen_private.mixed.res_data.mimeType = mimeType;\n    gen_private.mixed.files_list = [];\n    gen_private.mixed.files_list.push({\n      name: 'content.xml',\n      type: 'text/xml'\n    }, {\n      name: 'settings.xml',\n      type: 'text/xml'\n    }, {\n      name: 'styles.xml',\n      type: 'text/xml'\n    }, {\n      name: 'manifest.rdf',\n      type: 'application/rdf+xml'\n    }, {\n      name: 'meta.xml',\n      type: 'text/xml'\n    });\n    gen_private.plugs.intAddAnyResourceToParse('mimetype', 'buffer', null, makeOpenOfficeMimeType, true);\n    gen_private.plugs.intAddAnyResourceToParse('META-INF\\\\manifest.xml', 'buffer', gen_private.mixed.rels_main, gen_private.plugs.type.openoffice.cbMakeRels, true); // gen_private.plugs.intAddAnyResourceToParse ( 'settings.xml', 'buffer', null, make???, true );\n    // gen_private.plugs.intAddAnyResourceToParse ( 'styles.xml', 'buffer', null, make???, true );\n    // gen_private.plugs.intAddAnyResourceToParse ( 'manifest.rdf', 'buffer', null, make???, true );\n    // gen_private.plugs.intAddAnyResourceToParse ( 'meta.xml', 'buffer', null, make???, true );\n  };\n\n  return this;\n}\n\nbaseobj.plugins.registerPrototype('openoffice', makeoodoc, 'OpenOffice Document Prototype');\nexports.makeoodoc = makeoodoc;","map":null,"metadata":{},"sourceType":"script"}