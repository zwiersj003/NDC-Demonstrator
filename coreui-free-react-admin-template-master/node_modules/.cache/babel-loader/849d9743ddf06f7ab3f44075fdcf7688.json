{"ast":null,"code":"//\n// officegen: paragraph API for docx\n//\n// Please refer to README.md for this module's documentations.\n//\n// NOTE:\n// - Before changing this code please refer to the hacking the code section on README.md.\n//\n// Copyright (c) 2013-2017 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nvar fast_image_size = require('fast-image-size');\n\nvar path = require('path');\n/**\n * This function implementing the paragraph API for docx based documents.\n *\n * @param {object} genobj The document object to work on it.\n * @param {object} genPrivate Access to the internals of this object.\n * @param {string} docType Must be the same as the new_type parameter to the document generator's constructor.\n * @param {object} dataContainer Optional container to store the new object.\n * @param {object} extraSettings Optional extra settings for the paragraph API itself.\n * @param {object} options Paragraph options.\n * @summary Implementation of the pptx document plugins system so it'll be easier to add new features.\n * @constructor\n * @name MakeDocxP\n */\n\n\nfunction MakeDocxP(genobj, genPrivate, docType, dataContainer, extraSettings, options) {\n  // Save everything because we'll need it later:\n  this.docType = docType;\n  this.genPrivate = genPrivate;\n  this.ogPluginsApi = genPrivate.plugs; // Generic officegen API for plugins.\n\n  this.msPluginsApi = genPrivate.plugs.type.msoffice; // msoffice plugins API.\n\n  this.genobj = genobj;\n  this.data = [];\n  this.extraSettings = extraSettings || {};\n  this.options = options || {};\n  this.mainPath = genPrivate.features.type.msoffice.main_path; // The \"folder\" name inside the document zip that all the specific resources of this document type are stored.\n\n  this.mainPathFile = genPrivate.features.type.msoffice.main_path_file; // The name of the main real xml resource of this document.\n\n  this.relsMain = genPrivate.type.msoffice.rels_main; // Main rels file.\n\n  this.relsApp = genPrivate.type.msoffice.rels_app; // Main rels file inside the specific document type \"folder\".\n\n  this.filesList = genPrivate.type.msoffice.files_list; // Resources list xml.\n\n  this.srcFilesList = genPrivate.type.msoffice.src_files_list; // For storing extra files inside the document zip.\n\n  if (dataContainer) {\n    dataContainer.push(this);\n  } // Endif.\n\n\n  return this;\n}\n/**\n * Insert text inside this paragraph.\n *\n * @param {string} text_msg The text message itself.\n * @param {object} opt ???.\n * @param {object} flag_data ???.\n */\n\n\nMakeDocxP.prototype.addText = function (text_msg, opt, flag_data) {\n  var newP = this;\n  var objNum = newP.data.length;\n  newP.data[objNum] = {\n    text: text_msg,\n    options: opt || {},\n    ext_data: flag_data\n  };\n\n  if ((opt || {}).link) {\n    var link_rel_id = newP.relsApp.length + 1;\n    newP.relsApp.push({\n      type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',\n      target: opt.link,\n      targetMode: 'External'\n    });\n    newP.data[objNum].link_rel_id = link_rel_id;\n  }\n};\n/**\n * Insert a line break inside this paragraph.\n */\n\n\nMakeDocxP.prototype.addLineBreak = function () {\n  var newP = this;\n  newP.data[newP.data.length] = {\n    'line_break': true\n  };\n};\n/**\n * Insert a horizontal line inside this paragraph.\n */\n\n\nMakeDocxP.prototype.addHorizontalLine = function () {\n  var newP = this;\n  newP.data[newP.data.length] = {\n    'horizontal_line': true\n  };\n};\n/**\n * Insert a bookmark here.\n * @param {string} anchorName The anchor of this bookmark.\n */\n\n\nMakeDocxP.prototype.startBookmark = function (anchorName) {\n  var newP = this;\n  newP.data[newP.data.length] = {\n    'bookmark_start': anchorName\n  };\n};\n/**\n * Close the previous placed bookmark.\n */\n\n\nMakeDocxP.prototype.endBookmark = function () {\n  var newP = this;\n  newP.data[newP.data.length] = {\n    'bookmark_end': true\n  };\n};\n/**\n * Insert an image into the current paragraph.\n *\n * @param {object} image_path The image file to add.\n * @param {object} opt Additional options (cx, cy).\n * @param {object} image_format_type ???.\n */\n\n\nMakeDocxP.prototype.addImage = function (image_path, opt, image_format_type) {\n  var newP = this;\n  var image_ext = /.*\\.(.*?)$/.exec(image_path) && /.*\\.(.*?)$/.exec(image_path)[1] || null;\n  var image_type = typeof image_format_type == 'string' ? image_format_type : image_ext ? image_ext : 'png';\n  var defWidth = 320;\n  var defHeight = 200;\n\n  if (typeof image_path == 'string') {\n    var ret_data = fast_image_size(image_path);\n\n    if (ret_data.type == 'unknown') {\n      switch (image_type) {\n        case '.bmp':\n          image_type = 'bmp';\n          break;\n\n        case '.gif':\n          image_type = 'gif';\n          break;\n\n        case '.jpg':\n        case '.jpeg':\n          image_type = 'jpeg';\n          break;\n\n        case '.emf':\n          image_type = 'emf';\n          break;\n\n        case '.tiff':\n          image_type = 'tiff';\n          break;\n      } // End of switch.\n\n    } else {\n      if (ret_data.width) {\n        defWidth = ret_data.width;\n      } // Endif.\n\n\n      if (ret_data.height) {\n        defHeight = ret_data.height;\n      } // Endif.\n\n\n      image_type = ret_data.type;\n\n      if (image_type == 'jpg') {\n        image_type = 'jpeg';\n      } // Endif.\n\n    } // Endif.\n\n  } // Endif.\n\n\n  var objNum = newP.data.length;\n  newP.data[objNum] = {\n    image: image_path,\n    options: opt || {}\n  };\n\n  if (!newP.data[objNum].options.cx && defWidth) {\n    newP.data[objNum].options.cx = defWidth;\n  } // Endif.\n\n\n  if (!newP.data[objNum].options.cy && defHeight) {\n    newP.data[objNum].options.cy = defHeight;\n  } // Endif.\n\n\n  var image_id = newP.srcFilesList.indexOf(image_path);\n  var image_rel_id = -1;\n\n  if (image_id >= 0) {\n    for (var j = 0, total_size_j = newP.relsApp.length; j < total_size_j; j++) {\n      if (newP.relsApp[j].target == 'media/image' + (image_id + 1) + '.' + image_type) {\n        image_rel_id = j + 1;\n      } // Endif.\n\n    } // Endif.\n\n  } else {\n    image_id = newP.srcFilesList.length;\n    newP.srcFilesList[image_id] = image_path;\n    newP.ogPluginsApi.intAddAnyResourceToParse(newP.mainPath + '\\\\media\\\\image' + (image_id + 1) + '.' + image_type, typeof image_path == 'string' ? 'file' : 'stream', image_path, null, false);\n  } // Endif.\n\n\n  if (image_rel_id == -1) {\n    image_rel_id = newP.relsApp.length + 1;\n    newP.relsApp.push({\n      type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n      target: 'media/image' + (image_id + 1) + '.' + image_type,\n      clear: 'data'\n    });\n  } // Endif.\n\n\n  if ((opt || {}).link) {\n    var link_rel_id = newP.relsApp.length + 1;\n    newP.relsApp.push({\n      type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',\n      target: opt.link,\n      targetMode: 'External'\n    });\n    newP.data[objNum].link_rel_id = link_rel_id;\n  } // Endif.\n\n\n  newP.data[objNum].image_id = image_id;\n  newP.data[objNum].rel_id = image_rel_id;\n};\n\nmodule.exports = MakeDocxP;","map":null,"metadata":{},"sourceType":"script"}