{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/jasper/Documents/Documents/Zorgtechnologie/Programming/Demonstrator/NDC-Demonstrator/coreui-free-react-admin-template-master/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n/**\n * Render the component (passed to docx generator instance)\n * This is similar to react-pdf https://github.com/diegomura/react-pdf/blob/master/packages/react-pdf/src/index.js\n * @param {Object} input Root component\n */\n\n\nvar parse = function parse(input) {\n  var parseComponent = function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(inputComponent) {\n      var document;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // This property is accessed due to https://github.com/nitin42/redocx/blob/master/src/renderer/renderer.js#L32  \n              document = inputComponent.document;\n              _context.next = 3;\n              return document.render();\n\n            case 3:\n              return _context.abrupt(\"return\", inputComponent);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function parseComponent(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var toBuffer = function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return parseComponent(input);\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function toBuffer() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return {\n    toBuffer: toBuffer\n  };\n};\n\nexports.default = parse;","map":null,"metadata":{},"sourceType":"script"}