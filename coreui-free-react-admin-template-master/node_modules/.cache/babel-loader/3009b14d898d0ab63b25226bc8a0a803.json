{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Validates props for <Document /> component\n * @param {Object} props Component props\n */\n\n\nfunction validateDocProps(props) {\n  var info = props.info,\n      align = props.align;\n  var infoSchema = ['author', 'description', 'keywords', 'orientation', 'subject', 'title'];\n  var infoKeys = Object.keys(info || {});\n  var alignValues = ['left', 'right', 'center', 'justify'];\n\n  if (info && (typeof info === 'undefined' ? 'undefined' : _typeof(info)) !== 'object') {\n    throw new Error('\\'info\\' prop expected an information object.');\n  }\n\n  infoKeys.forEach(function (key) {\n    if (!infoSchema.includes(key)) {\n      throw new Error('\\'' + key + '\\' is an invalid property for document description.');\n    }\n  });\n\n  if (align && !alignValues.includes(align)) {\n    throw new Error('\\'align\\' prop can only take \\'left\\', \\'right\\', \\'center\\' and \\'justify\\'');\n  }\n}\n/**\n * Validates props for <Table /> component\n * @param {Object} props Component props\n */\n\n\nfunction validateTableProps(props) {\n  var headers = props.headers,\n      data = props.data,\n      style = props.style;\n  var knownProps = ['headers', 'data', 'style'];\n\n  if (headers && !Array.isArray(headers)) {\n    throw new Error('\\'headers\\' prop expected an array of object corresponding to the values for headers. For example - [{ value: \\'Name\\', styles: { color: \\'mistyrose\\' }}]');\n  }\n\n  if (data && !Array.isArray(data)) {\n    throw new Error('\\'data\\' prop expected an array of array values for each cell in row. For example - Considering there are three headers, name, subject and marks, the values will be  [[\\'A\\', \\'Maths\\', \\'30\\'], [\\'B\\', \\'Computer Science\\', \\'40\\']]');\n  }\n\n  if (style && (typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') {\n    throw new Error('style prop expected an object of table styles.');\n  }\n\n  var keys = Object.keys(props);\n  keys.forEach(function (key) {\n    if (!knownProps.includes(key)) {\n      throw new Error('Unknown prop \\'' + key + '\\' passed to <Table /> component. Supported props are headers, data and style.');\n    }\n  });\n}\n/**\n * Validates schema for headers prop in <Table /> component\n * @param {Object} props Component props\n */\n\n\nfunction headerValidators(props) {\n  var headers = props.headers;\n  var headerSchema = ['value', 'styles'];\n  var styleSchema = ['bold', 'size', 'color', 'align', 'vAlign', 'fontFamily', 'fill'];\n  headers.forEach(function (header) {\n    Object.keys(header).forEach(function (key) {\n      if (!headerSchema.includes(key)) {\n        throw new Error('\\'' + key + '\\' is not supported as a property for headers. Valid property names are \\'value\\' and \\'styles\\'.');\n      }\n    });\n  });\n  headers.forEach(function (header) {\n    Object.keys(header.styles).forEach(function (key) {\n      if (!styleSchema.includes(key)) {\n        throw new Error('\\'' + key + '\\' is an invalid style property for header. Check the style value for header ' + (headers.indexOf(key) + 1));\n      }\n    });\n  });\n}\n/**\n * Validates schema for style prop in <Table /> component \n * (currently styles cannot be extended so style schema is needed)\n * \n * @param {Object} props Component props\n */\n\n\nfunction tableStyleValidators(props) {\n  var style = props.style;\n  var styleKeys = Object.keys(style || {});\n  var tableStyleSchema = ['tableColWidth', 'tableSize', 'tableColor', 'tableAlign', 'borders'];\n  styleKeys.forEach(function (key) {\n    if (!tableStyleSchema.includes(key)) {\n      throw new Error('\\'' + key + '\\' is an invalid style property for table style.');\n    }\n  });\n}\n/**\n * Validates the props for Text component\n * @param {Object} props Component props\n */\n\n\nfunction validateTextProps(props) {\n  var knownProps = ['style', 'align', 'children'];\n  var takesProps = Object.keys(props || {});\n  takesProps.forEach(function (prop) {\n    if (!knownProps.includes(prop)) {\n      throw new Error('Unknown prop \\'' + prop + '\\' passed to Text component. Supported props are \\'style\\' and \\'align\\'.');\n    }\n  });\n}\n\nexports.validateDocProps = validateDocProps;\nexports.validateTableProps = validateTableProps;\nexports.headerValidators = headerValidators;\nexports.tableStyleValidators = tableStyleValidators;\nexports.validateTextProps = validateTextProps;","map":null,"metadata":{},"sourceType":"script"}