{"ast":null,"code":"//\n// officegen: document's plugins interface to implement additional features outside of the big mess of gen*.js\n//\n// Please refer to README.md for this module's documentations.\n//\n// NOTE:\n// - Before changing this code please refer to the hacking the code section on README.md.\n//\n// Copyright (c) 2013-2017 Ziv Barber;\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * Clear all the information of the current document.\n *\n * @param {object} docpluginman The plugin manager object.\n * @return Callback function to clear all the document's specific data.\n */\nfunction clearDocData(docpluginman) {\n  return function () {\n    // Clear all the specific document data:\n    docpluginman.genPrivate.type[docpluginman.docType] = {}; // Set back the default values:\n\n    if (typeof defValuesFunc === 'function') {\n      defValuesFunc(docpluginman);\n    } // Endif.\n    // Allow all the plugins to set their default data after clearing the document's data:\n\n\n    docpluginman.emitEvent('setData', docpluginman.genobj);\n  };\n}\n/**\n * This function implementing the document plugins system so instead of implementing \n * everything inside a big mess document generator, you can implement each feature \n * as a plugin. For each document generator that want to enable this plugin system \n * you must create an instance of this object.\n *\n * @param {object} genobj The document object to work on it.\n * @param {object} genPrivate Access to the internals of this object.\n * @param {string} docType Must be the same as the new_type parameter to the document generator's constructor.\n * @param {function} defValuesFunc The function to use to reset the document's data.\n * @summary Implementation of the pptx document plugins system so it'll be easier to add new features.\n * @constructor\n * @name MakeDocPluginapi\n */\n\n\nfunction MakeDocPluginapi(genobj, genPrivate, docType, defValuesFunc) {\n  // Save everything because we'll need it later:\n  this.docType = docType;\n  this.genPrivate = genPrivate;\n  this.ogPluginsApi = genPrivate.plugs;\n  this.genobj = genobj;\n  this.defValuesFunc = defValuesFunc;\n  this.callbacksList = {};\n  this.plugsList = []; // Here we can put anything specific to this document type BUT it's not data so if we'll clear the data inside the document we'll not need to clear anything here:\n\n  this.genPrivate.features.type[this.docType] = this; // Prepare the object that we'll use to store data specific to this document type:\n\n  this.genPrivate.type[this.docType] = {};\n\n  if (typeof defValuesFunc === 'function') {\n    // Put the default data:\n    defValuesFunc(this);\n  } // Endif.\n  // Catch the clear document data event and connect it to us:\n\n\n  genobj.on('clearDocType', clearDocData(this));\n  return this;\n}\n/**\n * Check for verbose mode for this document type.\n * @param {string} moduleName Optional, Allow filtering by feature / module.\n */\n\n\nMakeDocPluginapi.prototype.getVerboseMode = function (moduleName) {\n  return this.ogPluginsApi.getVerboseMode(this.docType, moduleName);\n};\n/**\n * Allow displaying a verbose messages to the console.\n * @param {string} message The message to display.\n */\n\n\nMakeDocPluginapi.prototype.logIfVerbose = function (message) {\n  if (this.getVerboseMode()) {\n    console.log(message);\n  } // Endif.\n\n};\n/**\n * Get the object to install features related to this document type.\n * @return The features object.\n */\n\n\nMakeDocPluginapi.prototype.getFeaturesStorage = function () {\n  return this.genPrivate.features.type[this.docType];\n};\n/**\n * Get the object to place data used by this document.\n * @return The document's data object.\n */\n\n\nMakeDocPluginapi.prototype.getDataStorage = function () {\n  return this.genPrivate.type[this.docType];\n};\n/**\n * Register a new callback.\n * @param{string} eventType Type of event to catch.\n * @param{function} cbFunc Callback function.\n */\n\n\nMakeDocPluginapi.prototype.registerCallback = function (eventType, cbFunc) {\n  // First make sure that we have a list of callbacks for this event type:\n  if (!this.callbacksList[eventType]) {\n    this.callbacksList[eventType] = [];\n  } // Endif.\n  // Now we'll just push this callback:\n\n\n  this.callbacksList[eventType].push(cbFunc);\n};\n/**\n * Emit an event.\n * @param{string} eventType Type of event to emit.\n * @param{*} eventData Additional optional data.\n */\n\n\nMakeDocPluginapi.prototype.emitEvent = function (eventType, eventData) {\n  var funcThis = this; // We'll do something only if we have this type of event:\n\n  if (this.callbacksList[eventType]) {\n    this.callbacksList[eventType].forEach(function (value) {\n      if (typeof value === 'function') {\n        value(eventData, eventType, funcThis);\n      } // Endif.\n\n    });\n  } // Endif.\n\n};\n\nmodule.exports = MakeDocPluginapi;","map":null,"metadata":{},"sourceType":"script"}