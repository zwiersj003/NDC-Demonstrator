{"ast":null,"code":"// Generated by CoffeeScript 1.9.1\n(function () {\n  var XMLDeclaration,\n      XMLNode,\n      create,\n      isObject,\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  create = require('lodash/object/create');\n  isObject = require('lodash/lang/isObject');\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLDeclaration = function (superClass) {\n    extend(XMLDeclaration, superClass);\n\n    function XMLDeclaration(parent, version, encoding, standalone) {\n      var ref;\n\n      XMLDeclaration.__super__.constructor.call(this, parent);\n\n      if (isObject(version)) {\n        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n      }\n\n      if (!version) {\n        version = '1.0';\n      }\n\n      if (version != null) {\n        this.version = this.stringify.xmlVersion(version);\n      }\n\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    }\n\n    XMLDeclaration.prototype.clone = function () {\n      return create(XMLDeclaration.prototype, this);\n    };\n\n    XMLDeclaration.prototype.toString = function (options, level) {\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;\n      pretty = (options != null ? options.pretty : void 0) || false;\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';\n      level || (level = 0);\n      space = new Array(level + offset + 1).join(indent);\n      r = '';\n\n      if (pretty) {\n        r += space;\n      }\n\n      r += '<?xml';\n\n      if (this.version != null) {\n        r += ' version=\"' + this.version + '\"';\n      }\n\n      if (this.encoding != null) {\n        r += ' encoding=\"' + this.encoding + '\"';\n      }\n\n      if (this.standalone != null) {\n        r += ' standalone=\"' + this.standalone + '\"';\n      }\n\n      r += '?>';\n\n      if (pretty) {\n        r += newline;\n      }\n\n      return r;\n    };\n\n    return XMLDeclaration;\n  }(XMLNode);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}